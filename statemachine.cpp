//
// Statemachine code from reading SCXML file 'statemachine.scxml'
// Created by: The Qt SCXML Compiler version 1 (Qt 5.15.13)
// WARNING! All changes made in this file will be lost!
//

#include "statemachine.h"

#include <qscxmlinvokableservice.h>
#include <qscxmltabledata.h>
#include <QScxmlEcmaScriptDataModel>

#if !defined(Q_QSCXMLC_OUTPUT_REVISION)
#error "The header file 'statemachine.scxml' doesn't include <qscxmltabledata.h>."
#elif Q_QSCXMLC_OUTPUT_REVISION != 1
#error "This file was generated using the qscxmlc from 5.15.13. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The qscxmlc has changed too much.)"
#endif

struct CalculatorStateMachine::Data: private QScxmlTableData {
    Data(CalculatorStateMachine &stateMachine)
        : stateMachine(stateMachine)
    {}

    void init() {
        stateMachine.setTableData(this);
        stateMachine.setDataModel(&dataModel);
    }

    QString name() const override final
    { return string(0); }

    QScxmlExecutableContent::ContainerId initialSetup() const override final
    { return 410; }

    QScxmlExecutableContent::InstructionId *instructions() const override final
    { return theInstructions; }

    QScxmlExecutableContent::StringId *dataNames(int *count) const override final
    { *count = 3; return dataIds; }

    QScxmlExecutableContent::EvaluatorInfo evaluatorInfo(QScxmlExecutableContent::EvaluatorId evaluatorId) const override final
    { Q_ASSERT(evaluatorId >= 0); Q_ASSERT(evaluatorId < 11); return evaluators[evaluatorId]; }

    QScxmlExecutableContent::AssignmentInfo assignmentInfo(QScxmlExecutableContent::EvaluatorId assignmentId) const override final
    { Q_ASSERT(assignmentId >= 0); Q_ASSERT(assignmentId < 24); return assignments[assignmentId]; }

    QScxmlExecutableContent::ForeachInfo foreachInfo(QScxmlExecutableContent::EvaluatorId foreachId) const override final
    { Q_ASSERT(foreachId >= 0); Q_ASSERT(foreachId < 0); return foreaches[foreachId]; }

    QString string(QScxmlExecutableContent::StringId id) const override final
    {
        Q_ASSERT(id >= QScxmlExecutableContent::NoString); Q_ASSERT(id < 106);
        if (id == QScxmlExecutableContent::NoString) return QString();
        return QString({static_cast<QStringData*>(strings.data + id)});
    }

    const qint32 *stateMachineTable() const override final
    { return theStateMachineTable; }

    QScxmlInvokableServiceFactory *serviceFactory(int id) const override final;

    CalculatorStateMachine &stateMachine;
    QScxmlEcmaScriptDataModel dataModel;

    static QScxmlExecutableContent::ParameterInfo param(QScxmlExecutableContent::StringId name,
                                                        QScxmlExecutableContent::EvaluatorId expr,
                                                        QScxmlExecutableContent::StringId location)
    {
        QScxmlExecutableContent::ParameterInfo p;
        p.name = name;
        p.expr = expr;
        p.location = location;
        return p;
    }

    static QScxmlExecutableContent::InvokeInfo invoke(
            QScxmlExecutableContent::StringId id,
            QScxmlExecutableContent::StringId prefix,
            QScxmlExecutableContent::EvaluatorId expr,
            QScxmlExecutableContent::StringId location,
            QScxmlExecutableContent::StringId context,
            QScxmlExecutableContent::ContainerId finalize,
            bool autoforward)
    {
        QScxmlExecutableContent::InvokeInfo i;
        i.id = id;
        i.prefix = prefix;
        i.expr = expr;
        i.location = location;
        i.context = context;
        i.finalize = finalize;
        i.autoforward = autoforward;
        return i;
    }

    static qint32 theInstructions[];
    static QScxmlExecutableContent::StringId dataIds[];
    static QScxmlExecutableContent::EvaluatorInfo evaluators[];
    static QScxmlExecutableContent::AssignmentInfo assignments[];
    static QScxmlExecutableContent::ForeachInfo foreaches[];
    static const qint32 theStateMachineTable[];
    static struct Strings {
        QArrayData data[106];
        qunicodechar stringdata[4098];
    } strings;
};

CalculatorStateMachine::CalculatorStateMachine(QObject *parent)
    : QScxmlStateMachine(&staticMetaObject, parent)
    , data(new Data(*this))
{ qRegisterMetaType<CalculatorStateMachine *>(); data->init(); }

CalculatorStateMachine::~CalculatorStateMachine()
{ delete data; }

QScxmlInvokableServiceFactory *CalculatorStateMachine::Data::serviceFactory(int id) const
{
    Q_UNUSED(id);
    Q_UNREACHABLE();
}

qint32 CalculatorStateMachine::Data::theInstructions[] = {
2, 1, 18, 1, 16, 3, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 2, 1,
24, 1, 22, 7, 0, 7, 1, 7, 2, 3, 14, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
-1, 0, 0, 1, 2, 7, 3, 1, 2, 7, 3, 1, 2, 7, 3, 2, 1, 20, 1, 18, 7, 4, 3, 25, 4,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 2, 1, 20, 1, 18, 7, 5, 3, 33,
4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 18, 7, 6, 3, 35, 4, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 2, 1, 20, 1, 18, 7, 7, 3, 39, 4,
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 18, 7, 8, 3, 41, 4, -1, -1,
-1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 2, 1, 23, 1, 21, 4, 43, 3, 44, 45, -1,
-1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 0, 1, 47, 1, -1, 2, 1, 20, 1, 18, 7, 9,
3, 52, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 2, 1, 20, 1, 18, 7,
10, 3, 58, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 18, 7, 11, 3,
60, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 2, 1, 20, 1, 18, 7, 12,
3, 64, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 18, 7, 13, 3, 67,
4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 4, 4, 43, 4, 45, 1, 4, 4,
43, 4, 68, 1, 6, 7, 14, 7, 15, 7, 16, 1, 30, 9, 1, 3, 2, 1, 4, 1, 2, 7, 17, 7,
18, 7, 19, 3, 81, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 1, 22, 5,
82, 4, 3, 81, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 86, 5, -1, 1,
28, 5, -1, 6, 9, 4, 7, 8, 9, 10, 2, 4, 16, 1, 2, 7, 20, 1, 2, 7, 21, 1, 2, 7, 22,
1, 2, 7, 23, 1, 0
};

QScxmlExecutableContent::StringId CalculatorStateMachine::Data::dataIds[] = {
7, 10, 13
};

QScxmlExecutableContent::EvaluatorInfo CalculatorStateMachine::Data::evaluators[] = {
{ 28, 29 }, { 48, 49 }, { 28, 55 }, { 75, 76 }, { 83, 84 }, { 83, 87 },
{ 88, 89 }, { 90, 91 }, { 92, 93 }, { 94, 95 }, { 96, 97 }
};

QScxmlExecutableContent::AssignmentInfo CalculatorStateMachine::Data::assignments[] = {
{ 7, 8, 9 }, { 10, 11, 12 }, { 13, 11, 12 }, { 10, 8, 18 }, { 10, 23, 24 },
{ 10, 31, 32 }, { 10, 31, 34 }, { 10, 37, 38 }, { 10, 31, 40 }, { 10, 23, 51 },
{ 10, 31, 57 }, { 10, 31, 59 }, { 10, 62, 63 }, { 10, 65, 66 }, { 10, 71, 72 },
{ 7, 8, 73 }, { 13, 11, 74 }, { 7, 77, 78 }, { 13, 79, 80 }, { 10, 8, 73 },
{ 7, 98, 99 }, { 7, 100, 101 }, { 7, 102, 103 }, { 7, 104, 105 }
};

QScxmlExecutableContent::ForeachInfo CalculatorStateMachine::Data::foreaches[] = {
{ -1, -1, -1, -1 }
};

#define STR_LIT(idx, ofs, len) \
    Q_STATIC_STRING_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(Strings, stringdata) + ofs * sizeof(qunicodechar) - idx * sizeof(QArrayData)) \
    )
CalculatorStateMachine::Data::Strings CalculatorStateMachine::Data::strings = {{
STR_LIT(0, 0, 22), STR_LIT(1, 23, 7), STR_LIT(2, 31, 2), STR_LIT(3, 34, 28),
STR_LIT(4, 63, 14), STR_LIT(5, 78, 5), STR_LIT(6, 84, 5), STR_LIT(7, 90, 9),
STR_LIT(8, 100, 2), STR_LIT(9, 103, 48), STR_LIT(10, 152, 10),
STR_LIT(11, 163, 1), STR_LIT(12, 165, 47), STR_LIT(13, 213, 3),
STR_LIT(14, 217, 31), STR_LIT(15, 249, 10), STR_LIT(16, 260, 6),
STR_LIT(17, 267, 4), STR_LIT(18, 272, 65), STR_LIT(19, 338, 7),
STR_LIT(20, 346, 5), STR_LIT(21, 352, 5), STR_LIT(22, 358, 8),
STR_LIT(23, 367, 3), STR_LIT(24, 371, 52), STR_LIT(25, 424, 34),
STR_LIT(26, 459, 8), STR_LIT(27, 468, 5), STR_LIT(28, 474, 24),
STR_LIT(29, 499, 74), STR_LIT(30, 574, 4), STR_LIT(31, 579, 61),
STR_LIT(32, 641, 106), STR_LIT(33, 748, 30), STR_LIT(34, 779, 123),
STR_LIT(35, 903, 47), STR_LIT(36, 951, 5), STR_LIT(37, 957, 14),
STR_LIT(38, 972, 60), STR_LIT(39, 1033, 31), STR_LIT(40, 1065, 124),
STR_LIT(41, 1190, 48), STR_LIT(42, 1239, 9), STR_LIT(43, 1249, 8),
STR_LIT(44, 1258, 35), STR_LIT(45, 1294, 9), STR_LIT(46, 1304, 10),
STR_LIT(47, 1315, 8), STR_LIT(48, 1324, 11), STR_LIT(49, 1336, 60),
STR_LIT(50, 1397, 8), STR_LIT(51, 1406, 52), STR_LIT(52, 1459, 34),
STR_LIT(53, 1494, 8), STR_LIT(54, 1503, 5), STR_LIT(55, 1509, 74),
STR_LIT(56, 1584, 4), STR_LIT(57, 1589, 106), STR_LIT(58, 1696, 30),
STR_LIT(59, 1727, 123), STR_LIT(60, 1851, 47), STR_LIT(61, 1899, 5),
STR_LIT(62, 1905, 15), STR_LIT(63, 1921, 61), STR_LIT(64, 1983, 31),
STR_LIT(65, 2015, 62), STR_LIT(66, 2078, 125), STR_LIT(67, 2204, 48),
STR_LIT(68, 2253, 7), STR_LIT(69, 2261, 6), STR_LIT(70, 2268, 1),
STR_LIT(71, 2270, 7), STR_LIT(72, 2278, 72), STR_LIT(73, 2351, 67),
STR_LIT(74, 2419, 66), STR_LIT(75, 2486, 14), STR_LIT(76, 2501, 75),
STR_LIT(77, 2577, 28), STR_LIT(78, 2606, 93), STR_LIT(79, 2700, 15),
STR_LIT(80, 2716, 80), STR_LIT(81, 2797, 50), STR_LIT(82, 2848, 8),
STR_LIT(83, 2857, 29), STR_LIT(84, 2887, 91), STR_LIT(85, 2979, 13),
STR_LIT(86, 2993, 7), STR_LIT(87, 3001, 93), STR_LIT(88, 3095, 20),
STR_LIT(89, 3116, 82), STR_LIT(90, 3199, 35), STR_LIT(91, 3235, 96),
STR_LIT(92, 3332, 34), STR_LIT(93, 3367, 97), STR_LIT(94, 3465, 33),
STR_LIT(95, 3499, 96), STR_LIT(96, 3596, 32), STR_LIT(97, 3629, 95),
STR_LIT(98, 3725, 13), STR_LIT(99, 3739, 78), STR_LIT(100, 3818, 13),
STR_LIT(101, 3832, 78), STR_LIT(102, 3911, 13), STR_LIT(103, 3925, 78),
STR_LIT(104, 4004, 13), STR_LIT(105, 4018, 78)
},{
0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72,0x53,0x74,0x61,0x74,0x65,0x4d,0x61,0x63,0x68,0x69,0x6e,0x65,0, // 0: CalculatorStateMachine
0x77,0x72,0x61,0x70,0x70,0x65,0x72,0, // 1: wrapper
0x6f,0x6e,0, // 2: on
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x6f,0x6e,0, // 3: send instruction in state on
0x44,0x49,0x53,0x50,0x4c,0x41,0x59,0x2e,0x55,0x50,0x44,0x41,0x54,0x45,0, // 4: DISPLAY.UPDATE
0x72,0x65,0x61,0x64,0x79,0, // 5: ready
0x62,0x65,0x67,0x69,0x6e,0, // 6: begin
0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0, // 7: long_expr
0x27,0x27,0, // 8: ''
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x62,0x65,0x67,0x69,0x6e,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x27,0x27,0x22,0, // 9: assign instruction in state begin with expr=\"''\"
0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0, // 10: short_expr
0x30,0, // 11: 0
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x62,0x65,0x67,0x69,0x6e,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x30,0x22,0, // 12: assign instruction in state begin with expr=\"0\"
0x72,0x65,0x73,0, // 13: res
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x62,0x65,0x67,0x69,0x6e,0, // 14: send instruction in state begin
0x4f,0x50,0x45,0x52,0x2e,0x4d,0x49,0x4e,0x55,0x53,0, // 15: OPER.MINUS
0x72,0x65,0x73,0x75,0x6c,0x74,0, // 16: result
0x4f,0x50,0x45,0x52,0, // 17: OPER
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x72,0x65,0x61,0x64,0x79,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x27,0x27,0x22,0, // 18: assign instruction in transition  of state 'ready' with expr=\"''\"
0x44,0x49,0x47,0x49,0x54,0x2e,0x30,0, // 19: DIGIT.0
0x44,0x49,0x47,0x49,0x54,0, // 20: DIGIT
0x50,0x4f,0x49,0x4e,0x54,0, // 21: POINT
0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x31,0, // 22: negated1
0x27,0x2d,0x27,0, // 23: '-'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x31,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x27,0x2d,0x27,0x22,0, // 24: assign instruction in state negated1 with expr=\"'-'\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x31,0, // 25: send instruction in state negated1
0x6f,0x70,0x65,0x72,0x61,0x6e,0x64,0x31,0, // 26: operand1
0x7a,0x65,0x72,0x6f,0x31,0, // 27: zero1
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x20,0x21,0x3d,0x20,0x27,0x44,0x49,0x47,0x49,0x54,0x2e,0x30,0x27,0, // 28: _event.name != 'DIGIT.0'
0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x7a,0x65,0x72,0x6f,0x31,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x20,0x21,0x3d,0x20,0x27,0x44,0x49,0x47,0x49,0x54,0x2e,0x30,0x27,0x22,0, // 29: transition instruction in state zero1 with cond=\"_event.name != 'DIGIT.0'\"
0x69,0x6e,0x74,0x31,0, // 30: int1
0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0, // 31: short_expr+_event.name.substr(_event.name.lastIndexOf('.')+1)
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x69,0x6e,0x74,0x31,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0x22,0, // 32: assign instruction in state int1 with expr=\"short_expr+_event.name.substr(_event.name.lastIndexOf('.')+1)\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x69,0x6e,0x74,0x31,0, // 33: send instruction in state int1
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x69,0x6e,0x74,0x31,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0x22,0, // 34: assign instruction in transition  of state 'int1' with expr=\"short_expr+_event.name.substr(_event.name.lastIndexOf('.')+1)\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x69,0x6e,0x74,0x31,0x27,0, // 35: send instruction in transition  of state 'int1'
0x66,0x72,0x61,0x63,0x31,0, // 36: frac1
0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2e,0x27,0, // 37: short_expr+'.'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x66,0x72,0x61,0x63,0x31,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2e,0x27,0x22,0, // 38: assign instruction in state frac1 with expr=\"short_expr+'.'\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x66,0x72,0x61,0x63,0x31,0, // 39: send instruction in state frac1
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x66,0x72,0x61,0x63,0x31,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0x22,0, // 40: assign instruction in transition  of state 'frac1' with expr=\"short_expr+_event.name.substr(_event.name.lastIndexOf('.')+1)\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x66,0x72,0x61,0x63,0x31,0x27,0, // 41: send instruction in transition  of state 'frac1'
0x6f,0x70,0x45,0x6e,0x74,0x65,0x72,0x65,0x64,0, // 42: opEntered
0x43,0x41,0x4c,0x43,0x2e,0x53,0x55,0x42,0, // 43: CALC.SUB
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x6f,0x70,0x45,0x6e,0x74,0x65,0x72,0x65,0x64,0, // 44: send instruction in state opEntered
0x4f,0x50,0x2e,0x49,0x4e,0x53,0x45,0x52,0x54,0, // 45: OP.INSERT
0x23,0x5f,0x69,0x6e,0x74,0x65,0x72,0x6e,0x61,0x6c,0, // 46: #_internal
0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0, // 47: operator
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0, // 48: _event.name
0x70,0x61,0x72,0x61,0x6d,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x6f,0x70,0x45,0x6e,0x74,0x65,0x72,0x65,0x64,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x22,0, // 49: param instruction in state opEntered with expr=\"_event.name\"
0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x32,0, // 50: negated2
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x32,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x27,0x2d,0x27,0x22,0, // 51: assign instruction in state negated2 with expr=\"'-'\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x32,0, // 52: send instruction in state negated2
0x6f,0x70,0x65,0x72,0x61,0x6e,0x64,0x32,0, // 53: operand2
0x7a,0x65,0x72,0x6f,0x32,0, // 54: zero2
0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x7a,0x65,0x72,0x6f,0x32,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x20,0x21,0x3d,0x20,0x27,0x44,0x49,0x47,0x49,0x54,0x2e,0x30,0x27,0x22,0, // 55: transition instruction in state zero2 with cond=\"_event.name != 'DIGIT.0'\"
0x69,0x6e,0x74,0x32,0, // 56: int2
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x69,0x6e,0x74,0x32,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0x22,0, // 57: assign instruction in state int2 with expr=\"short_expr+_event.name.substr(_event.name.lastIndexOf('.')+1)\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x69,0x6e,0x74,0x32,0, // 58: send instruction in state int2
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x69,0x6e,0x74,0x32,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0x22,0, // 59: assign instruction in transition  of state 'int2' with expr=\"short_expr+_event.name.substr(_event.name.lastIndexOf('.')+1)\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x69,0x6e,0x74,0x32,0x27,0, // 60: send instruction in transition  of state 'int2'
0x66,0x72,0x61,0x63,0x32,0, // 61: frac2
0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x20,0x2b,0x27,0x2e,0x27,0, // 62: short_expr +'.'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x66,0x72,0x61,0x63,0x32,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x20,0x2b,0x27,0x2e,0x27,0x22,0, // 63: assign instruction in state frac2 with expr=\"short_expr +'.'\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x66,0x72,0x61,0x63,0x32,0, // 64: send instruction in state frac2
0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x20,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0, // 65: short_expr +_event.name.substr(_event.name.lastIndexOf('.')+1)
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x66,0x72,0x61,0x63,0x32,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x20,0x2b,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x73,0x75,0x62,0x73,0x74,0x72,0x28,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x6e,0x61,0x6d,0x65,0x2e,0x6c,0x61,0x73,0x74,0x49,0x6e,0x64,0x65,0x78,0x4f,0x66,0x28,0x27,0x2e,0x27,0x29,0x2b,0x31,0x29,0x22,0, // 66: assign instruction in transition  of state 'frac2' with expr=\"short_expr +_event.name.substr(_event.name.lastIndexOf('.')+1)\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x66,0x72,0x61,0x63,0x32,0x27,0, // 67: send instruction in transition  of state 'frac2'
0x43,0x41,0x4c,0x43,0x2e,0x44,0x4f,0, // 68: CALC.DO
0x45,0x51,0x55,0x41,0x4c,0x53,0, // 69: EQUALS
0x43,0, // 70: C
0x27,0x27,0x2b,0x20,0x72,0x65,0x73,0, // 71: ''+ res
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x27,0x27,0x2b,0x20,0x72,0x65,0x73,0x22,0, // 72: assign instruction in transition  of state 'wrapper' with expr=\"''+ res\"
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x27,0x27,0x22,0, // 73: assign instruction in transition  of state 'wrapper' with expr=\"''\"
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x30,0x22,0, // 74: assign instruction in transition  of state 'wrapper' with expr=\"0\"
0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x21,0x3d,0x27,0x27,0, // 75: short_expr!=''
0x69,0x66,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x21,0x3d,0x27,0x27,0x22,0, // 76: if instruction in transition  of state 'wrapper' with cond=\"short_expr!=''\"
0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x28,0x27,0x2b,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x29,0x27,0, // 77: long_expr+'('+short_expr+')'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x28,0x27,0x2b,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x29,0x27,0x22,0, // 78: assign instruction in transition  of state 'wrapper' with expr=\"long_expr+'('+short_expr+')'\"
0x65,0x76,0x61,0x6c,0x28,0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x29,0, // 79: eval(long_expr)
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x65,0x76,0x61,0x6c,0x28,0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x29,0x22,0, // 80: assign instruction in transition  of state 'wrapper' with expr=\"eval(long_expr)\"
0x73,0x65,0x6e,0x64,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0, // 81: send instruction in transition  of state 'wrapper'
0x27,0x72,0x65,0x73,0x75,0x6c,0x74,0x27,0, // 82: 'result'
0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x3d,0x3d,0x27,0x27,0x3f,0x72,0x65,0x73,0x3a,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0, // 83: short_expr==''?res:short_expr
0x6c,0x6f,0x67,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x3d,0x3d,0x27,0x27,0x3f,0x72,0x65,0x73,0x3a,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x22,0, // 84: log instruction in transition  of state 'wrapper' with expr=\"short_expr==''?res:short_expr\"
0x75,0x70,0x64,0x61,0x74,0x65,0x44,0x69,0x73,0x70,0x6c,0x61,0x79,0, // 85: updateDisplay
0x64,0x69,0x73,0x70,0x6c,0x61,0x79,0, // 86: display
0x70,0x61,0x72,0x61,0x6d,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x3d,0x3d,0x27,0x27,0x3f,0x72,0x65,0x73,0x3a,0x73,0x68,0x6f,0x72,0x74,0x5f,0x65,0x78,0x70,0x72,0x22,0, // 87: param instruction in transition  of state 'wrapper' with expr=\"short_expr==''?res:short_expr\"
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0, // 88: _event.data.operator
0x6c,0x6f,0x67,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x22,0, // 89: log instruction in transition  of state 'wrapper' with expr=\"_event.data.operator\"
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x20,0x3d,0x3d,0x20,0x27,0x4f,0x50,0x45,0x52,0x2e,0x50,0x4c,0x55,0x53,0x27,0, // 90: _event.data.operator == 'OPER.PLUS'
0x69,0x66,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x20,0x3d,0x3d,0x20,0x27,0x4f,0x50,0x45,0x52,0x2e,0x50,0x4c,0x55,0x53,0x27,0x22,0, // 91: if instruction in transition  of state 'wrapper' with cond=\"_event.data.operator == 'OPER.PLUS'\"
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x3d,0x3d,0x27,0x4f,0x50,0x45,0x52,0x2e,0x4d,0x49,0x4e,0x55,0x53,0x27,0, // 92: _event.data.operator=='OPER.MINUS'
0x65,0x6c,0x69,0x66,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x3d,0x3d,0x27,0x4f,0x50,0x45,0x52,0x2e,0x4d,0x49,0x4e,0x55,0x53,0x27,0x22,0, // 93: elif instruction in transition  of state 'wrapper' with cond=\"_event.data.operator=='OPER.MINUS'\"
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x3d,0x3d,0x27,0x4f,0x50,0x45,0x52,0x2e,0x53,0x54,0x41,0x52,0x27,0, // 94: _event.data.operator=='OPER.STAR'
0x65,0x6c,0x69,0x66,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x3d,0x3d,0x27,0x4f,0x50,0x45,0x52,0x2e,0x53,0x54,0x41,0x52,0x27,0x22,0, // 95: elif instruction in transition  of state 'wrapper' with cond=\"_event.data.operator=='OPER.STAR'\"
0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x3d,0x3d,0x27,0x4f,0x50,0x45,0x52,0x2e,0x44,0x49,0x56,0x27,0, // 96: _event.data.operator=='OPER.DIV'
0x65,0x6c,0x69,0x66,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x63,0x6f,0x6e,0x64,0x3d,0x22,0x5f,0x65,0x76,0x65,0x6e,0x74,0x2e,0x64,0x61,0x74,0x61,0x2e,0x6f,0x70,0x65,0x72,0x61,0x74,0x6f,0x72,0x3d,0x3d,0x27,0x4f,0x50,0x45,0x52,0x2e,0x44,0x49,0x56,0x27,0x22,0, // 97: elif instruction in transition  of state 'wrapper' with cond=\"_event.data.operator=='OPER.DIV'\"
0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2b,0x27,0, // 98: long_expr+'+'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2b,0x27,0x22,0, // 99: assign instruction in transition  of state 'wrapper' with expr=\"long_expr+'+'\"
0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2d,0x27,0, // 100: long_expr+'-'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2d,0x27,0x22,0, // 101: assign instruction in transition  of state 'wrapper' with expr=\"long_expr+'-'\"
0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2a,0x27,0, // 102: long_expr+'*'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2a,0x27,0x22,0, // 103: assign instruction in transition  of state 'wrapper' with expr=\"long_expr+'*'\"
0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2f,0x27,0, // 104: long_expr+'/'
0x61,0x73,0x73,0x69,0x67,0x6e,0x20,0x69,0x6e,0x73,0x74,0x72,0x75,0x63,0x74,0x69,0x6f,0x6e,0x20,0x69,0x6e,0x20,0x74,0x72,0x61,0x6e,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x20,0x6f,0x66,0x20,0x73,0x74,0x61,0x74,0x65,0x20,0x27,0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x27,0x20,0x77,0x69,0x74,0x68,0x20,0x65,0x78,0x70,0x72,0x3d,0x22,0x6c,0x6f,0x6e,0x67,0x5f,0x65,0x78,0x70,0x72,0x2b,0x27,0x2f,0x27,0x22,0 // 105: assign instruction in transition  of state 'wrapper' with expr=\"long_expr+'/'\"
}};

const qint32 CalculatorStateMachine::Data::theStateMachineTable[] = {
	0x1, // version
	0, // name
	1, // data-model
	194, // child states array offset
	33, // transition to initial states
	-1, // initial setup
	0, // binding
	-1, // maxServiceId
	14, 16, // state offset and count
	190, 39, // transition offset and count
	424, 198, // array offset and size

	// States:
	1, -1, 0, 34, -1, -1, -1, -1, 185, 187, -1,
	2, 0, 0, 35, -1, 0, -1, -1, 166, 173, -1,
	5, 1, 0, 36, -1, -1, -1, -1, 22, 25, -1,
	6, 2, 0, -1, -1, 21, -1, -1, -1, 4, -1,
	16, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1,
	22, 1, 0, -1, -1, 60, -1, -1, -1, 44, -1,
	26, 1, 0, 37, -1, -1, -1, -1, 76, 80, -1,
	27, 6, 0, -1, -1, -1, -1, -1, -1, 56, -1,
	30, 6, 0, -1, -1, 83, -1, -1, -1, 65, -1,
	36, 6, 0, -1, -1, 126, -1, -1, -1, 70, -1,
	42, 1, 0, -1, -1, 169, -1, -1, -1, 100, -1,
	50, 1, 0, -1, -1, 195, -1, -1, -1, 117, -1,
	53, 1, 0, 38, -1, -1, -1, -1, 153, 157, -1,
	54, 12, 0, -1, -1, -1, -1, -1, -1, 129, -1,
	56, 12, 0, -1, -1, 218, -1, -1, -1, 138, -1,
	61, 12, 0, -1, -1, 261, -1, -1, -1, 143, -1,

	// Transitions:
	2, -1, 1, 3, 0, -1, 
	8, -1, 1, 2, 6, -1, 
	12, -1, 1, 2, 10, 48, 
	16, -1, 1, 2, 14, 52, 
	20, -1, 1, 2, 18, 56, 
	34, -1, 1, 5, 32, -1, 
	38, -1, 1, 5, 36, -1, 
	42, -1, 1, 5, 40, -1, 
	50, 0, 1, 7, 48, -1, 
	54, -1, 1, 7, 52, -1, 
	61, -1, 1, 8, 59, -1, 
	63, -1, 1, 8, -1, 106, 
	68, -1, 1, 9, -1, 149, 
	74, -1, 1, 6, 72, -1, 
	86, -1, 1, 10, 84, -1, 
	90, -1, 1, 10, 88, -1, 
	94, -1, 1, 10, 92, -1, 
	98, -1, 1, 10, 96, -1, 
	107, -1, 1, 11, 105, -1, 
	111, -1, 1, 11, 109, -1, 
	115, -1, 1, 11, 113, -1, 
	123, 2, 1, 13, 121, -1, 
	127, -1, 1, 13, 125, -1, 
	132, -1, 1, 14, -1, 241, 
	136, -1, 1, 14, 134, -1, 
	141, -1, 1, 15, -1, 284, 
	147, -1, 1, 12, 145, 304, 
	151, -1, 1, 12, 149, 310, 
	164, -1, 1, 1, 162, -1, 
	177, -1, 1, 0, -1, 316, 
	179, -1, 1, 0, -1, 324, 
	181, -1, 1, 0, -1, 356, 
	183, -1, 1, 0, -1, 380, 
	-1, -1, 2, -1, 196, -1, 
	-1, -1, 2, 0, 192, -1, 
	-1, -1, 2, 1, 175, -1, 
	-1, -1, 2, 2, 30, -1, 
	-1, -1, 2, 6, 82, -1, 
	-1, -1, 2, 12, 160, -1, 

	// Arrays:
	1, 5, 
	1, 15, 
	1, 0, 
	1, 10, 
	1, 17, 
	1, 7, 
	1, 19, 
	1, 8, 
	1, 20, 
	1, 9, 
	1, 21, 
	2, 3, 4, 
	4, 1, 2, 3, 4, 
	1, 3, 
	1, 7, 
	1, 19, 
	1, 8, 
	1, 20, 
	1, 9, 
	1, 21, 
	3, 5, 6, 7, 
	1, 8, 
	1, 20, 
	1, 9, 
	1, 21, 
	2, 8, 9, 
	1, 9, 
	1, 21, 
	1, 20, 
	2, 10, 11, 
	1, 20, 
	1, 12, 
	1, 10, 
	1, 17, 
	3, 7, 8, 9, 
	1, 13, 
	1, 7, 
	1, 11, 
	1, 15, 
	1, 15, 
	1, 21, 
	1, 13, 
	1, 19, 
	1, 14, 
	1, 20, 
	4, 14, 15, 16, 17, 
	1, 13, 
	1, 19, 
	1, 14, 
	1, 20, 
	1, 15, 
	1, 21, 
	3, 18, 19, 20, 
	1, 14, 
	1, 20, 
	1, 15, 
	1, 21, 
	2, 21, 22, 
	1, 20, 
	1, 15, 
	1, 21, 
	2, 23, 24, 
	1, 20, 
	1, 25, 
	1, 10, 
	1, 17, 
	1, 4, 
	1, 69, 
	3, 13, 14, 15, 
	2, 26, 27, 
	1, 13, 
	1, 1, 
	1, 70, 
	6, 2, 5, 6, 10, 11, 12, 
	1, 28, 
	1, 2, 
	1, 68, 
	1, 43, 
	1, 4, 
	1, 45, 
	1, 1, 
	4, 29, 30, 31, 32, 
	1, 1, 
	1, 0, 
	1, 0, 

	0xc0ff33 // terminator
};

struct qt_meta_stringdata_CalculatorStateMachine_t {
    QByteArrayData data[36];
    unsigned char stringdata0[370];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_CalculatorStateMachine_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_CalculatorStateMachine_t qt_meta_stringdata_CalculatorStateMachine = {
    {
QT_MOC_LITERAL(0, 0, 22), // "CalculatorStateMachine"
QT_MOC_LITERAL(1, 23, 14), // "wrapperChanged"
QT_MOC_LITERAL(2, 38, 0), // ""
QT_MOC_LITERAL(3, 39, 6), // "active"
QT_MOC_LITERAL(4, 46, 9), // "onChanged"
QT_MOC_LITERAL(5, 56, 12), // "readyChanged"
QT_MOC_LITERAL(6, 69, 12), // "beginChanged"
QT_MOC_LITERAL(7, 82, 13), // "resultChanged"
QT_MOC_LITERAL(8, 96, 15), // "negated1Changed"
QT_MOC_LITERAL(9, 112, 15), // "operand1Changed"
QT_MOC_LITERAL(10, 128, 12), // "zero1Changed"
QT_MOC_LITERAL(11, 141, 11), // "int1Changed"
QT_MOC_LITERAL(12, 153, 12), // "frac1Changed"
QT_MOC_LITERAL(13, 166, 16), // "opEnteredChanged"
QT_MOC_LITERAL(14, 183, 15), // "negated2Changed"
QT_MOC_LITERAL(15, 199, 15), // "operand2Changed"
QT_MOC_LITERAL(16, 215, 12), // "zero2Changed"
QT_MOC_LITERAL(17, 228, 11), // "int2Changed"
QT_MOC_LITERAL(18, 240, 12), // "frac2Changed"
QT_MOC_LITERAL(19, 253, 6), // "parent"
QT_MOC_LITERAL(20, 260, 7), // "wrapper"
QT_MOC_LITERAL(21, 268, 2), // "on"
QT_MOC_LITERAL(22, 271, 5), // "ready"
QT_MOC_LITERAL(23, 277, 5), // "begin"
QT_MOC_LITERAL(24, 283, 6), // "result"
QT_MOC_LITERAL(25, 290, 8), // "negated1"
QT_MOC_LITERAL(26, 299, 8), // "operand1"
QT_MOC_LITERAL(27, 308, 5), // "zero1"
QT_MOC_LITERAL(28, 314, 4), // "int1"
QT_MOC_LITERAL(29, 319, 5), // "frac1"
QT_MOC_LITERAL(30, 325, 9), // "opEntered"
QT_MOC_LITERAL(31, 335, 8), // "negated2"
QT_MOC_LITERAL(32, 344, 8), // "operand2"
QT_MOC_LITERAL(33, 353, 5), // "zero2"
QT_MOC_LITERAL(34, 359, 4), // "int2"
QT_MOC_LITERAL(35, 364, 5) // "frac2"
    },{
0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72,0x53,0x74,0x61,0x74,0x65,0x4d,0x61,0x63,0x68,0x69,0x6e,0x65,0, // 0: CalculatorStateMachine
0x77,0x72,0x61,0x70,0x70,0x65,0x72,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 1: wrapperChanged
0, // 2: 
0x61,0x63,0x74,0x69,0x76,0x65,0, // 3: active
0x6f,0x6e,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 4: onChanged
0x72,0x65,0x61,0x64,0x79,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 5: readyChanged
0x62,0x65,0x67,0x69,0x6e,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 6: beginChanged
0x72,0x65,0x73,0x75,0x6c,0x74,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 7: resultChanged
0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x31,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 8: negated1Changed
0x6f,0x70,0x65,0x72,0x61,0x6e,0x64,0x31,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 9: operand1Changed
0x7a,0x65,0x72,0x6f,0x31,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 10: zero1Changed
0x69,0x6e,0x74,0x31,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 11: int1Changed
0x66,0x72,0x61,0x63,0x31,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 12: frac1Changed
0x6f,0x70,0x45,0x6e,0x74,0x65,0x72,0x65,0x64,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 13: opEnteredChanged
0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x32,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 14: negated2Changed
0x6f,0x70,0x65,0x72,0x61,0x6e,0x64,0x32,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 15: operand2Changed
0x7a,0x65,0x72,0x6f,0x32,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 16: zero2Changed
0x69,0x6e,0x74,0x32,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 17: int2Changed
0x66,0x72,0x61,0x63,0x32,0x43,0x68,0x61,0x6e,0x67,0x65,0x64,0, // 18: frac2Changed
0x70,0x61,0x72,0x65,0x6e,0x74,0, // 19: parent
0x77,0x72,0x61,0x70,0x70,0x65,0x72,0, // 20: wrapper
0x6f,0x6e,0, // 21: on
0x72,0x65,0x61,0x64,0x79,0, // 22: ready
0x62,0x65,0x67,0x69,0x6e,0, // 23: begin
0x72,0x65,0x73,0x75,0x6c,0x74,0, // 24: result
0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x31,0, // 25: negated1
0x6f,0x70,0x65,0x72,0x61,0x6e,0x64,0x31,0, // 26: operand1
0x7a,0x65,0x72,0x6f,0x31,0, // 27: zero1
0x69,0x6e,0x74,0x31,0, // 28: int1
0x66,0x72,0x61,0x63,0x31,0, // 29: frac1
0x6f,0x70,0x45,0x6e,0x74,0x65,0x72,0x65,0x64,0, // 30: opEntered
0x6e,0x65,0x67,0x61,0x74,0x65,0x64,0x32,0, // 31: negated2
0x6f,0x70,0x65,0x72,0x61,0x6e,0x64,0x32,0, // 32: operand2
0x7a,0x65,0x72,0x6f,0x32,0, // 33: zero2
0x69,0x6e,0x74,0x32,0, // 34: int2
0x66,0x72,0x61,0x63,0x32,0 // 35: frac2
    }};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_CalculatorStateMachine[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      16,   14, // methods
      16,  145, // properties
       0,    0, // enums/sets
       1,  209, // constructors
       0,       // flags
      16,       // signalCount

 // signals: name, argc, parameters, tag, flags
       1,    1,   94,    2, 0x06 /* Public */,
       4,    1,   97,    2, 0x06 /* Public */,
       5,    1,  100,    2, 0x06 /* Public */,
       6,    1,  103,    2, 0x06 /* Public */,
       7,    1,  106,    2, 0x06 /* Public */,
       8,    1,  109,    2, 0x06 /* Public */,
       9,    1,  112,    2, 0x06 /* Public */,
      10,    1,  115,    2, 0x06 /* Public */,
      11,    1,  118,    2, 0x06 /* Public */,
      12,    1,  121,    2, 0x06 /* Public */,
      13,    1,  124,    2, 0x06 /* Public */,
      14,    1,  127,    2, 0x06 /* Public */,
      15,    1,  130,    2, 0x06 /* Public */,
      16,    1,  133,    2, 0x06 /* Public */,
      17,    1,  136,    2, 0x06 /* Public */,
      18,    1,  139,    2, 0x06 /* Public */,

 // signals: parameters
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,
    QMetaType::Void, QMetaType::Bool,    3,

 // constructors: parameters
    0x80000000 | 2, QMetaType::QObjectStar,   19,

 // properties: name, type, flags
      20, QMetaType::Bool, 0x006a6001,
      21, QMetaType::Bool, 0x006a6001,
      22, QMetaType::Bool, 0x006a6001,
      23, QMetaType::Bool, 0x006a6001,
      24, QMetaType::Bool, 0x006a6001,
      25, QMetaType::Bool, 0x006a6001,
      26, QMetaType::Bool, 0x006a6001,
      27, QMetaType::Bool, 0x006a6001,
      28, QMetaType::Bool, 0x006a6001,
      29, QMetaType::Bool, 0x006a6001,
      30, QMetaType::Bool, 0x006a6001,
      31, QMetaType::Bool, 0x006a6001,
      32, QMetaType::Bool, 0x006a6001,
      33, QMetaType::Bool, 0x006a6001,
      34, QMetaType::Bool, 0x006a6001,
      35, QMetaType::Bool, 0x006a6001,

 // properties: notify_signal_id
       0,
       1,
       2,
       3,
       4,
       5,
       6,
       7,
       8,
       9,
      10,
      11,
      12,
      13,
      14,
      15,

 // constructors: name, argc, parameters, tag, flags
       0,    1,  142,    2, 0x0e /* Public */,

       0        // eod
};

void CalculatorStateMachine::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::CreateInstance) {
        switch (_id) {
        case 0: { CalculatorStateMachine *_r = new CalculatorStateMachine((*reinterpret_cast< QObject **>(_a[1])));
            if (_a[0]) *reinterpret_cast<QObject**>(_a[0]) = _r; } break;
        default: break;
        }
    } else if (_c == QMetaObject::InvokeMetaMethod) {
        CalculatorStateMachine *_t = static_cast<CalculatorStateMachine *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: QMetaObject::activate(_o, &staticMetaObject, 0, _a); break;
        case 1: QMetaObject::activate(_o, &staticMetaObject, 1, _a); break;
        case 2: QMetaObject::activate(_o, &staticMetaObject, 2, _a); break;
        case 3: QMetaObject::activate(_o, &staticMetaObject, 3, _a); break;
        case 4: QMetaObject::activate(_o, &staticMetaObject, 4, _a); break;
        case 5: QMetaObject::activate(_o, &staticMetaObject, 5, _a); break;
        case 6: QMetaObject::activate(_o, &staticMetaObject, 6, _a); break;
        case 7: QMetaObject::activate(_o, &staticMetaObject, 7, _a); break;
        case 8: QMetaObject::activate(_o, &staticMetaObject, 8, _a); break;
        case 9: QMetaObject::activate(_o, &staticMetaObject, 9, _a); break;
        case 10: QMetaObject::activate(_o, &staticMetaObject, 10, _a); break;
        case 11: QMetaObject::activate(_o, &staticMetaObject, 11, _a); break;
        case 12: QMetaObject::activate(_o, &staticMetaObject, 12, _a); break;
        case 13: QMetaObject::activate(_o, &staticMetaObject, 13, _a); break;
        case 14: QMetaObject::activate(_o, &staticMetaObject, 14, _a); break;
        case 15: QMetaObject::activate(_o, &staticMetaObject, 15, _a); break;
        default: ;
        }
    } else if (_c == QMetaObject::IndexOfMethod) {
        int *result = reinterpret_cast<int *>(_a[0]);
        void **func = reinterpret_cast<void **>(_a[1]);
        Q_UNUSED(result);
        Q_UNUSED(func);
    }
#ifndef QT_NO_PROPERTIES
    else if (_c == QMetaObject::ReadProperty) {
        CalculatorStateMachine *_t = static_cast<CalculatorStateMachine *>(_o);
        Q_UNUSED(_t)
        void *_v = _a[0];
        switch (_id) {
        case 0: *reinterpret_cast< bool*>(_v) = _t->isActive(0); break;
        case 1: *reinterpret_cast< bool*>(_v) = _t->isActive(1); break;
        case 2: *reinterpret_cast< bool*>(_v) = _t->isActive(2); break;
        case 3: *reinterpret_cast< bool*>(_v) = _t->isActive(3); break;
        case 4: *reinterpret_cast< bool*>(_v) = _t->isActive(4); break;
        case 5: *reinterpret_cast< bool*>(_v) = _t->isActive(5); break;
        case 6: *reinterpret_cast< bool*>(_v) = _t->isActive(6); break;
        case 7: *reinterpret_cast< bool*>(_v) = _t->isActive(7); break;
        case 8: *reinterpret_cast< bool*>(_v) = _t->isActive(8); break;
        case 9: *reinterpret_cast< bool*>(_v) = _t->isActive(9); break;
        case 10: *reinterpret_cast< bool*>(_v) = _t->isActive(10); break;
        case 11: *reinterpret_cast< bool*>(_v) = _t->isActive(11); break;
        case 12: *reinterpret_cast< bool*>(_v) = _t->isActive(12); break;
        case 13: *reinterpret_cast< bool*>(_v) = _t->isActive(13); break;
        case 14: *reinterpret_cast< bool*>(_v) = _t->isActive(14); break;
        case 15: *reinterpret_cast< bool*>(_v) = _t->isActive(15); break;
        default: break;
        }
    } else if (_c == QMetaObject::WriteProperty) {
    } else if (_c == QMetaObject::ResetProperty) {
    }
#endif // QT_NO_PROPERTIES
}

const QMetaObject CalculatorStateMachine::staticMetaObject = {
    { &QScxmlStateMachine::staticMetaObject, qt_meta_stringdata_CalculatorStateMachine.data,
      qt_meta_data_CalculatorStateMachine,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *CalculatorStateMachine::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *CalculatorStateMachine::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, reinterpret_cast<const char *>(
            qt_meta_stringdata_CalculatorStateMachine.stringdata0)))
        return static_cast<void*>(const_cast< CalculatorStateMachine*>(this));
    return QScxmlStateMachine::qt_metacast(_clname);
}

int CalculatorStateMachine::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QScxmlStateMachine::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 16)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 16)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 16;
    }
#ifndef QT_NO_PROPERTIES
   else if (_c == QMetaObject::ReadProperty || _c == QMetaObject::WriteProperty
            || _c == QMetaObject::ResetProperty || _c == QMetaObject::RegisterPropertyMetaType) {
        qt_static_metacall(this, _c, _id, _a);
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyDesignable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyScriptable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyStored) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyEditable) {
        _id -= 16;
    } else if (_c == QMetaObject::QueryPropertyUser) {
        _id -= 16;
    }
#endif // QT_NO_PROPERTIES
    return _id;
}


